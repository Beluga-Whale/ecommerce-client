name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install deps ignoring peer conflicts
        run: npm install --legacy-peer-deps

      - name: Run tests
        run: npm run test

      - name: Run linter
        run: npm run lint

      - name: Build Next.js
        run: npm run build

      - name: Build Docker image
        run: |
          docker build \
            -f Dockerfile.prod \
            --build-arg NEXT_PUBLIC_PORT=${{ secrets.NEXT_PUBLIC_PORT }} \
            -t ecommerce-client-app .

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          docker tag ecommerce-client-app ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-test-docker
#     steps:
#       - name: ðŸ“¦ SSH & Deploy Docker Container on EC2
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest
#             sudo docker stop taskmanage-frontend || true
#             sudo docker rm taskmanage-frontend || true
#             sudo docker run -d \
#               --name taskmanage-frontend \
#               -p 80:3000 \
#               --restart unless-stopped \
#               ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest
