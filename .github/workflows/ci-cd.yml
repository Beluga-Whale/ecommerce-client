name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install deps ignoring peer conflicts
        run: npm install --legacy-peer-deps

      - name: Run tests
        run: npm run test

      - name: Build Next.js
        run: npm run build

      - name: ðŸ“„ Create .env.production from GitHub Secret
        run: echo "${{ secrets.ENV_PROD_CONTENT }}" > .env.production

      - name: Build Docker image
        run: |
          docker build \
            -f Dockerfile.prod \
            --build-arg NEXT_PUBLIC_PORT=${{ secrets.NEXT_PUBLIC_PORT }} \
            --build-arg NEXT_PUBLIC_CLIENT_URL=${{ secrets.NEXT_PUBLIC_CLIENT_URL }} \
            --build-arg NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }} \
            --build-arg NEXT_PUBLIC_UPLOAD_PRESET=${{ secrets.NEXT_PUBLIC_UPLOAD_PRESET }} \
            --build-arg CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} \
            --build-arg CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLIC_KEY }} \
            -t ecommerce-client-app .

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          docker tag ecommerce-client-app ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-test-docker
    steps:
      - name: ðŸ“¦ SSH & Deploy Docker Container on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest
            sudo docker stop ecommerce-frontend || true
            sudo docker rm ecommerce-frontend || true
            sudo docker run -d \
              --name ecommerce-frontend \
              -p 80:3000 \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/ecommerce-client-app:latest
